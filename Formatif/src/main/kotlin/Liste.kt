package org.example

fun main()
{
    // Tests pour joursParMois
    println("joursParMois(1)  = ${jourParMois(1)}")   // [31]
    println("joursParMois(7)  = ${jourParMois(7)}")   // [31, 28, 31, 30, 31, 30, 31]
    println("joursParMois(12) = ${jourParMois(12)}")  // liste complÃ¨te

    // Test pour tri
    val liste = listOf(5.5, 9.0, 2.1, 1.2)
    println("tri([5.5, 9, 2.1, 1.2]) = ${trie(liste)}") // [1.2, 2.1, 5.5, 9.0]

    // Test dâ€™exception
    try {
        println(jourParMois(13))
    } catch (e: Exception) {
        println("Erreur : ${e.message}")
    }

}
fun jourParMois (n: Int ): List<Int>
{
 val jours = listOf(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
    if (n < 1 || n > 12)
    {
        throw IllegalArgumentException("n doit Ãªtre entre 1 et 12")

    }

    return jours.take(n)
}
fun trie (liste: List<Double>) : List<Double>
{
  return liste.sorted()
}

//val liste = listOf(1, 2, 3)
//val listeMutable = mutableListOf(1, 2, 3)
//liste.take(3)     // prend les 3 premiers
//liste.takeLast(2) // prend les 2 derniers
//liste[0] // premier Ã©lÃ©ment
//liste.sorted() // croissant
//liste.sortedDescending() // decroissant
//liste.reversed() // inverser
//liste.distinct() // enelve les doublons
//liste.map { it * 2 } // double chaque valeur
//mots.map { it.uppercase() } // majuscule
//liste.filter { it % 2 == 0 } // pairs uniquement
//liste.size // nombre total
//liste.count { it > 10 } // nombre qui respecte une condition
//liste.sum()
//liste.average()
//liste.minOrNull()
//liste.maxOrNull()
//for (x in liste) { // parcourir
//    println(x)
//}
//if (liste.isEmpty()) println("Vide") // verifier si vide
//if (n > 12) throw IllegalArgumentException("Trop grand") // lancer une exception

//ğŸ”¹ 1. Les bases Ã  toujours garder en tÃªte
//
//En Kotlin, tu as deux grands types de listes :
//
//listOf(...) â†’ liste immuable (tu ne peux pas modifier son contenu).
//
//mutableListOf(...) â†’ liste modifiable (ajouter, enlever, remplacer des Ã©lÃ©ments).
//
//ğŸ”¹ 2. Quand tu vois un exercice avec une liste
//
//Toujours te poser ces questions dans lâ€™ordre :
//


//ğŸŸ¢ Ã‰tape 1 : Quelle est la liste de dÃ©part ?
//
//Est-ce que lâ€™Ã©noncÃ© te donne dÃ©jÃ  une liste (listOf(...)) ?
//
//Ou est-ce que tu dois la crÃ©er toi-mÃªme (comme joursParMois) ?
//
//ğŸ‘‰ Ici dans ton numÃ©ro : tu dois crÃ©er une liste des jours par mois. Donc premiÃ¨re Ã©tape : dÃ©finir la liste de rÃ©fÃ©rence :
//
//val jours = listOf(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
//


//ğŸŸ¢ Ã‰tape 2 : Est-ce que je garde toute la liste ou juste une partie ?
//
//Parfois on demande de prendre seulement les n premiers Ã©lÃ©ments â†’ pense Ã  .take(n)
//
//Parfois on demande de filtrer selon une condition â†’ pense Ã  .filter { ... }
//
//Parfois on demande de parcourir pour calculer quelque chose â†’ pense Ã  une boucle for ou .map.
//
//ğŸ‘‰ Dans ton numÃ©ro, on prend jusquâ€™Ã  n mois â†’ donc .take(n) est parfait.
//


//ğŸŸ¢ Ã‰tape 3 : Est-ce que je dois transformer la liste ?
//
//Si tu dois trier â†’ .sorted() (ordre croissant) ou .sortedDescending().
//
//Si tu dois appliquer un calcul sur chaque Ã©lÃ©ment â†’ .map { it * 2 } ou autre.
//
//Si tu dois compter â†’ .count { condition }.
//
//ğŸ‘‰ Dans ton numÃ©ro tri, on veut trier â†’ donc .sorted() suffit.
//


//ğŸŸ¢ Ã‰tape 4 : Et si la valeur est invalide ?
//
//Beaucoup dâ€™exercices testent aussi ta capacitÃ© Ã  gÃ©rer les cas limites :
//
//Si la liste est vide â†’ souvent il faut lancer une exception.
//
//Si n > 12 ou n < 1 â†’ tu lances une exception.
//
//ğŸ‘‰ Dans ton numÃ©ro, on doit lancer une exception si n > 12.
//
//ğŸ”¹ 3. FaÃ§on de penser (mÃ©thode gÃ©nÃ©rale)
//
//Quand tu lis un Ã©noncÃ© avec des listes, entraÃ®ne-toi Ã  penser dans cet ordre :
//
//Quelle est la liste ? (est-ce quâ€™on me la donne ou je dois la crÃ©er ?)
//
//Quelle partie de la liste je prends ? (tout, une portion, un filtre)
//
//Est-ce que je dois transformer les Ã©lÃ©ments ? (tri, calcul, uppercase, etc.)
//
//Est-ce quâ€™il faut gÃ©rer des cas limites ? (vide, n trop grand, mauvaise donnÃ©e)
//
//ğŸ”¹ 4. Application Ã  dâ€™autres exercices
//
//Compter les Ã©lÃ©ments pairs dans une liste :
//
//Liste donnÃ©e ? â†’ oui â†’ listOf(...).
//
//Partie Ã  prendre ? â†’ non, toute la liste.
//
//Transformation ? â†’ pas besoin, mais un filtre + count.
//
//Cas limite ? â†’ si liste vide â†’ 0.
//
//Solution : liste.count { it % 2 == 0 }
//
//Mettre en majuscule les prÃ©noms :
//
//Liste donnÃ©e de prÃ©noms.
//
//Partie ? â†’ non.
//
//Transformation ? â†’ oui â†’ .map { it.uppercase() }
//
//Cas limite ? â†’ si vide â†’ retourne vide.
//
//Somme cumulative :
//
//Liste donnÃ©e de points.
//
//Partie ? â†’ toute la liste.
//
//Transformation ? â†’ oui â†’ parcourir et accumuler.
//
//Cas limite ? â†’ si vide â†’ liste vide.